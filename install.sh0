#!/bin/bash

SCRIPT_END=$( awk '
  BEGIN { err=1; } 
  /^\w*___END_OF_SHELL_SCRIPT___\w*$/ { print NR+1; err=0; exit 0; } 
  END { if (err==1) print "?"; }
' "$0" )

ZIP_FILE=${SPENDCRAFT_ROOT}/build.zip

echo "Checking for embedded file..."

if [ "$SCRIPT_END" == '?' ]
then
   echo Can\'t find embedded file
   exit 1
fi

if [ -e ${ZIP_FILE} ]; then
  rm ${ZIP_FILE}
fi

echo 'Extracting file to ' ${ZIP_FILE}
tail -n +$SCRIPT_END $0 | base64 -d > ${ZIP_FILE}

cd ${SPENDCRAFT_ROOT}

APP=spendcraft
APP_NEW=$APP.new
APP_OLD=$APP.old

pm2 stop prod-server
pm2 stop queue

set -e

# ./inst.sh
# APP=spendcraft
# APP_NEW=$APP.new
# APP_OLD=$APP.old

unzip ${ZIP_FILE} > /dev/null
rm -fr $APP_NEW
mv build $APP_NEW

pushd $APP_NEW

ln -s ../$APP-env .env
ln -s ../.npmrc .npmrc
ln -s ../PushNotificationKey.p8 .

#npm -dd ci --omit dev --omit optional
#npm -dd ci --omit dev --omit optional --foreground-scripts
npm ci --omit dev --omit optional

popd

./backup.sh

pushd $APP_NEW

node ace migration:status
node ace migration:run

popd

rm -fr $APP_OLD
if [ -e $APP ]; then
  mv $APP $APP_OLD
fi
mv $APP_NEW $APP

pm2 restart prod-server --time --cron "0 0 * * *"
pm2 restart queue --time
pm2 logs --nostream

# Clean up
if [ -e ${ZIP_FILE} ]; then
  rm ${ZIP_FILE}
fi

exit 0

___END_OF_SHELL_SCRIPT___
